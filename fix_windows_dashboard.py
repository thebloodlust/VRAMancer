#!/usr/bin/env python3
"""
Script de diagnostic et r√©paration pour les dashboards VRAMancer sur Windows
Identifie et r√©sout les probl√®mes de d√©pendances manquantes
"""

import os
import sys
import subprocess
import importlib.util
from pathlib import Path

def check_module(module_name, pip_name=None):
    """V√©rifie si un module est install√©"""
    try:
        spec = importlib.util.find_spec(module_name)
        return spec is not None
    except ImportError:
        return False

def install_package(package_name):
    """Installe un package via pip"""
    try:
        print(f"Installation de {package_name}...")
        result = subprocess.run([sys.executable, "-m", "pip", "install", package_name], 
                              capture_output=True, text=True, check=True)
        print(f"‚úÖ {package_name} install√© avec succ√®s")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erreur installation {package_name}: {e}")
        print(f"stdout: {e.stdout}")
        print(f"stderr: {e.stderr}")
        return False

def diagnose_dashboard_issues():
    """Diagnostic complet des probl√®mes de dashboard"""
    print("üîç Diagnostic VRAMancer Dashboard Windows...")
    print("=" * 50)
    
    issues = []
    
    # 1. V√©rification Python version
    python_version = sys.version_info
    print(f"Python version: {python_version.major}.{python_version.minor}.{python_version.micro}")
    if python_version < (3, 8):
        issues.append("Python version trop ancienne (< 3.8)")
    
    # 2. V√©rification des d√©pendances critiques
    critical_deps = {
        'flask': 'flask',
        'flask_socketio': 'flask-socketio',
        'PyQt5': 'PyQt5',
        'tkinter': None,  # Built-in normalement
        'requests': 'requests',
        'numpy': 'numpy',
        'psutil': 'psutil',
        'torch': 'torch',
        'socketio': 'python-socketio[client]'
    }
    
    missing_deps = []
    
    for module, pip_package in critical_deps.items():
        if not check_module(module):
            missing_deps.append((module, pip_package))
            print(f"‚ùå Module manquant: {module}")
        else:
            print(f"‚úÖ Module pr√©sent: {module}")
    
    # 3. V√©rification sp√©cifique Windows
    if os.name == 'nt':  # Windows
        print("\nü™ü V√©rifications sp√©cifiques Windows:")
        
        # V√©rification PyQt5 sur Windows
        try:
            import PyQt5.QtWidgets
            print("‚úÖ PyQt5 fonctionne correctement")
        except ImportError as e:
            print(f"‚ùå PyQt5 probl√®me: {e}")
            issues.append("PyQt5 non fonctionnel sur Windows")
        
        # V√©rification tkinter
        try:
            import tkinter
            print("‚úÖ tkinter disponible")
        except ImportError:
            print("‚ùå tkinter manquant (probl√®me installation Python)")
            issues.append("tkinter manquant")
    
    # 4. V√©rification des fichiers dashboard
    dashboard_files = [
        'dashboard/dashboard_web.py',
        'dashboard/dashboard_qt.py', 
        'dashboard/dashboard_tk.py'
    ]
    
    for file in dashboard_files:
        if os.path.exists(file):
            print(f"‚úÖ Fichier pr√©sent: {file}")
        else:
            print(f"‚ùå Fichier manquant: {file}")
            issues.append(f"Fichier manquant: {file}")
    
    return issues, missing_deps

def fix_dashboard_issues(missing_deps):
    """Tente de r√©soudre les probl√®mes identifi√©s"""
    print("\nüîß Tentative de r√©paration...")
    print("=" * 50)
    
    # Installation des d√©pendances manquantes
    for module, pip_package in missing_deps:
        if pip_package:
            if not install_package(pip_package):
                print(f"‚ùå Impossible d'installer {pip_package}")
                return False
    
    # V√©rification post-installation
    print("\n‚úÖ V√©rification post-installation...")
    all_good = True
    for module, _ in missing_deps:
        if check_module(module):
            print(f"‚úÖ {module} maintenant disponible")
        else:
            print(f"‚ùå {module} toujours manquant")
            all_good = False
    
    return all_good

def create_windows_launcher():
    """Cr√©e un lanceur Windows pour les dashboards"""
    launcher_content = '''@echo off
echo VRAMancer Dashboard Launcher
echo ==========================

echo Verification de l'environnement...
python -c "import sys; print(f'Python: {sys.version}')"

echo.
echo Dashboards disponibles:
echo 1. Web Dashboard (recommande)
echo 2. Qt Dashboard  
echo 3. Tkinter Dashboard
echo.

set /p choice="Choisissez (1/2/3): "

if "%choice%"=="1" (
    echo Lancement Web Dashboard...
    python dashboard/dashboard_web.py
) else if "%choice%"=="2" (
    echo Lancement Qt Dashboard...
    python dashboard/dashboard_qt.py
) else if "%choice%"=="3" (
    echo Lancement Tkinter Dashboard...
    python dashboard/dashboard_tk.py
) else (
    echo Choix invalide
    pause
)
'''
    
    with open('launch_dashboard.bat', 'w') as f:
        f.write(launcher_content)
    
    print("‚úÖ Lanceur Windows cr√©√©: launch_dashboard.bat")

def create_minimal_dashboard():
    """Cr√©e un dashboard minimal qui fonctionne sur Windows"""
    minimal_dashboard = '''#!/usr/bin/env python3
"""
Dashboard minimal VRAMancer pour Windows
Version simplifi√©e sans d√©pendances complexes
"""

import os
import sys
import webbrowser
from http.server import HTTPServer, BaseHTTPRequestHandler
import json
import urllib.parse

class MinimalDashboardHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        if self.path == '/' or self.path == '/dashboard':
            self.send_response(200)
            self.send_header('Content-type', 'text/html')
            self.end_headers()
            
            html = '''<!DOCTYPE html>
<html>
<head>
    <title>VRAMancer - Dashboard Minimal Windows</title>
    <meta charset="utf-8">
    <style>
        body { 
            font-family: Arial, sans-serif; 
            background: #1a1a1a; 
            color: #fff; 
            margin: 0; 
            padding: 20px; 
        }
        .container { max-width: 1200px; margin: 0 auto; }
        .card { 
            background: #2d2d2d; 
            border-radius: 8px; 
            padding: 20px; 
            margin: 10px 0; 
            border-left: 4px solid #00bfff; 
        }
        .status { 
            display: inline-block; 
            padding: 4px 12px; 
            border-radius: 4px; 
            font-size: 12px; 
        }
        .status.ok { background: #28a745; }
        .status.error { background: #dc3545; }
        .status.warning { background: #ffc107; color: #000; }
        button { 
            background: #007acc; 
            color: white; 
            border: none; 
            padding: 8px 16px; 
            border-radius: 4px; 
            cursor: pointer; 
            margin: 5px; 
        }
        button:hover { background: #005a9e; }
        .grid { display: grid; grid-template-columns: 1fr 1fr; gap: 20px; }
        @media (max-width: 768px) { .grid { grid-template-columns: 1fr; } }
    </style>
</head>
<body>
    <div class="container">
        <h1>üß† VRAMancer Dashboard - Windows Edition</h1>
        <p class="status ok">Dashboard minimal op√©rationnel</p>
        
        <div class="grid">
            <div class="card">
                <h2>üñ•Ô∏è Syst√®me</h2>
                <p>OS: Windows</p>
                <p>Python: """ + sys.version.split()[0] + """</p>
                <p>Statut: <span class="status ok">Op√©rationnel</span></p>
            </div>
            
            <div class="card">
                <h2>üéÆ GPU Status</h2>
                <p>D√©tection automatique...</p>
                <button onclick="refreshGPU()">Actualiser GPU</button>
            </div>
            
            <div class="card">
                <h2>üîß Actions Rapides</h2>
                <button onclick="testSystem()">Test Syst√®me</button>
                <button onclick="checkDeps()">V√©rifier D√©pendances</button>
                <button onclick="location.reload()">Actualiser</button>
            </div>
            
            <div class="card">
                <h2>üìä Logs Syst√®me</h2>
                <div id="logs" style="background:#1a1a1a;padding:10px;border-radius:4px;height:200px;overflow-y:auto;">
                    <div>Dashboard minimal d√©marr√© avec succ√®s</div>
                    <div>Pr√™t pour les tests de base</div>
                </div>
            </div>
        </div>
        
        <div class="card">
            <h2>üöÄ Prochaines √âtapes</h2>
            <p>1. V√©rifiez que ce dashboard minimal fonctionne</p>
            <p>2. Installez les d√©pendances manquantes si n√©cessaire</p>
            <p>3. Testez les dashboards avanc√©s (Qt/Web)</p>
            <button onclick="window.open('https://github.com/thebloodlust/VRAMancer', '_blank')">Documentation</button>
        </div>
    </div>
    
    <script>
        function addLog(message) {
            const logs = document.getElementById('logs');
            const div = document.createElement('div');
            div.textContent = new Date().toLocaleTimeString() + ': ' + message;
            logs.appendChild(div);
            logs.scrollTop = logs.scrollHeight;
        }
        
        function refreshGPU() {
            addLog('Actualisation GPU...');
            // Simulation - dans la vraie version, √ßa appellerait l\\'API
            setTimeout(() => addLog('GPU: Detection simul√©e OK'), 1000);
        }
        
        function testSystem() {
            addLog('Test syst√®me en cours...');
            setTimeout(() => addLog('Syst√®me: Tests de base OK'), 1500);
        }
        
        function checkDeps() {
            addLog('V√©rification d√©pendances...');
            setTimeout(() => addLog('D√©pendances: V√©rification simul√©e'), 1000);
        }
        
        // Auto-refresh logs
        setInterval(() => {
            addLog('Syst√®me op√©rationnel - ' + new Date().toLocaleString());
        }, 30000);
    </script>
</body>
</html>'''
            
            self.wfile.write(html.encode())
        
        elif self.path.startswith('/api/'):
            # API endpoints basiques
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.end_headers()
            
            response = {"status": "ok", "message": "API minimal active"}
            self.wfile.write(json.dumps(response).encode())
        
        else:
            self.send_response(404)
            self.end_headers()

def run_minimal_dashboard():
    """Lance le dashboard minimal"""
    print("üöÄ Lancement du Dashboard Minimal VRAMancer...")
    print("=" * 50)
    
    port = 8080
    server = HTTPServer(('localhost', port), MinimalDashboardHandler)
    
    print(f"‚úÖ Dashboard d√©marr√© sur: http://localhost:{port}")
    print("   - Dashboard: http://localhost:8080/dashboard")
    print("   - API: http://localhost:8080/api/status")
    print()
    print("üåê Ouverture automatique du navigateur...")
    
    try:
        webbrowser.open(f'http://localhost:{port}/dashboard')
    except Exception:
        print("   (Ouverture navigateur √©chou√©e - ouvrez manuellement)")
    
    print()
    print("Appuyez Ctrl+C pour arr√™ter")
    
    try:
        server.serve_forever()
    except KeyboardInterrupt:
        print("\\nüõë Dashboard arr√™t√©")
        server.shutdown()

if __name__ == "__main__":
    run_minimal_dashboard()
'''
    
    with open('dashboard_minimal_windows.py', 'w', encoding='utf-8') as f:
        f.write(minimal_dashboard)
    
    print("‚úÖ Dashboard minimal cr√©√©: dashboard_minimal_windows.py")

def main():
    print("ü©∫ VRAMancer Windows Dashboard Doctor")
    print("=" * 50)
    
    # Diagnostic
    issues, missing_deps = diagnose_dashboard_issues()
    
    if not issues and not missing_deps:
        print("\nüéâ Aucun probl√®me d√©tect√© ! Les dashboards devraient fonctionner.")
        return
    
    print(f"\nüìã R√©sum√©: {len(issues)} probl√®mes, {len(missing_deps)} d√©pendances manquantes")
    
    # Demander permission de r√©parer
    if missing_deps:
        print("\nüîß D√©pendances √† installer:")
        for module, pip_package in missing_deps:
            print(f"   - {module} (via {pip_package})")
        
        response = input("\nInstaller les d√©pendances manquantes ? (o/n): ").lower()
        
        if response in ('o', 'oui', 'y', 'yes'):
            if fix_dashboard_issues(missing_deps):
                print("\n‚úÖ R√©paration termin√©e avec succ√®s!")
            else:
                print("\n‚ö†Ô∏è R√©paration partielle - certains probl√®mes persistent")
        else:
            print("R√©paration annul√©e")
    
    # Cr√©er des outils de secours
    print("\nüõ†Ô∏è Cr√©ation d'outils de secours Windows...")
    create_windows_launcher()
    create_minimal_dashboard()
    
    print("\nüìã Solutions disponibles:")
    print("1. launch_dashboard.bat - Lanceur Windows interactif")
    print("2. dashboard_minimal_windows.py - Dashboard de secours")
    print("3. python dashboard_minimal_windows.py - Test imm√©diat")
    
    print("\nüí° Pour tester imm√©diatement:")
    print("   python dashboard_minimal_windows.py")

if __name__ == "__main__":
    main()