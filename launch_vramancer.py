#!/usr/bin/env python3
"""
Lanceur intelligent VRAMancer pour Windows
D√©tecte automatiquement les probl√®mes et propose des solutions
"""

import os
import sys
import subprocess
import importlib.util
import webbrowser
import platform
from pathlib import Path

class VRAMancerLauncher:
    def __init__(self):
        self.is_windows = platform.system() == "Windows"
        self.python_exe = sys.executable
        self.missing_deps = []
        self.dashboard_status = {}
        
    def check_python_version(self):
        """V√©rifie la version de Python"""
        version = sys.version_info
        print(f"üêç Python {version.major}.{version.minor}.{version.micro}")
        
        if version < (3, 8):
            print("‚ö†Ô∏è  ATTENTION: Python 3.8+ recommand√©")
            return False
        return True
    
    def check_dependencies(self):
        """V√©rifie toutes les d√©pendances critiques"""
        print("üîç V√©rification des d√©pendances...")
        
        # D√©pendances pour chaque dashboard
        deps = {
            'web': ['flask', 'flask_socketio', 'requests'],
            'qt': ['PyQt5', 'PyQt5.QtWidgets'],
            'tk': ['tkinter'],
            'core': ['numpy', 'psutil', 'torch']
        }
        
        for dashboard, modules in deps.items():
            status = True
            missing = []
            
            for module in modules:
                try:
                    if '.' in module:  # Sous-module
                        parent, child = module.split('.', 1)
                        parent_spec = importlib.util.find_spec(parent)
                        if parent_spec:
                            # Tenter d'importer le sous-module
                            exec(f"import {module}")
                    else:
                        importlib.import_module(module)
                    print(f"  ‚úÖ {module}")
                except ImportError:
                    print(f"  ‚ùå {module}")
                    missing.append(module)
                    status = False
            
            self.dashboard_status[dashboard] = {
                'available': status,
                'missing': missing
            }
        
        return any(d['available'] for d in self.dashboard_status.values())
    
    def install_missing_dependencies(self):
        """Installe les d√©pendances manquantes"""
        print("üîß Installation des d√©pendances manquantes...")
        
        # Map des modules vers packages pip
        pip_packages = {
            'flask': 'flask',
            'flask_socketio': 'flask-socketio',
            'PyQt5': 'PyQt5',
            'requests': 'requests',
            'numpy': 'numpy',
            'psutil': 'psutil',
            'torch': 'torch'
        }
        
        to_install = set()
        for dashboard, info in self.dashboard_status.items():
            if not info['available']:
                for missing in info['missing']:
                    if missing in pip_packages:
                        to_install.add(pip_packages[missing])
        
        if to_install:
            print(f"üì¶ Installation de: {', '.join(to_install)}")
            try:
                cmd = [self.python_exe, "-m", "pip", "install"] + list(to_install)
                result = subprocess.run(cmd, capture_output=True, text=True, check=True)
                print("‚úÖ Installation r√©ussie!")
                return True
            except subprocess.CalledProcessError as e:
                print(f"‚ùå Erreur installation: {e}")
                print(f"Sortie: {e.stdout}")
                print(f"Erreur: {e.stderr}")
                return False
        return True
    
    def launch_dashboard(self, dashboard_type):
        """Lance un dashboard sp√©cifique"""
        dashboard_files = {
            'web': 'dashboard/dashboard_web.py',
            'qt': 'dashboard/dashboard_qt.py',
            'tk': 'dashboard/dashboard_tk.py',
            'minimal': 'dashboard_minimal_windows.py'
        }
        
        if dashboard_type not in dashboard_files:
            print(f"‚ùå Dashboard type inconnu: {dashboard_type}")
            return False
        
        dashboard_file = dashboard_files[dashboard_type]
        
        if not os.path.exists(dashboard_file):
            print(f"‚ùå Fichier manquant: {dashboard_file}")
            return False
        
        print(f"üöÄ Lancement du dashboard {dashboard_type}...")
        
        try:
            if dashboard_type == 'web':
                # Pour le web dashboard, ouvrir aussi le navigateur
                import threading
                def open_browser():
                    import time
                    time.sleep(2)  # Attendre que le serveur d√©marre
                    webbrowser.open('http://localhost:5000')
                
                threading.Thread(target=open_browser, daemon=True).start()
            
            # Lancer le dashboard
            subprocess.run([self.python_exe, dashboard_file], check=True)
            return True
            
        except subprocess.CalledProcessError as e:
            print(f"‚ùå Erreur lancement: {e}")
            return False
        except KeyboardInterrupt:
            print("\nüõë Dashboard arr√™t√© par l'utilisateur")
            return True
    
    def show_menu(self):
        """Affiche le menu principal"""
        print("\n" + "="*50)
        print("üß† VRAMancer Dashboard Launcher")
        print("="*50)
        
        # Afficher le statut des dashboards
        print("\nüìä Dashboards disponibles:")
        
        icons = {'web': 'üåê', 'qt': 'üñ•Ô∏è', 'tk': 'ü™ü'}
        
        for dashboard, info in self.dashboard_status.items():
            if dashboard in icons:
                icon = icons[dashboard]
                status = "‚úÖ Pr√™t" if info['available'] else f"‚ùå Manque: {', '.join(info['missing'])}"
                print(f"  {icon} {dashboard.upper()}: {status}")
        
        print("\nüõ†Ô∏è Actions disponibles:")
        print("  1. Web Dashboard (recommand√©)")
        print("  2. Qt Dashboard")
        print("  3. Tkinter Dashboard")
        print("  4. Dashboard Minimal (secours)")
        print("  5. Installer d√©pendances manquantes")
        print("  6. Diagnostic complet")
        print("  0. Quitter")
        
        return input("\nChoisissez une option (0-6): ").strip()
    
    def run_diagnostic(self):
        """Lance le diagnostic complet"""
        print("\nü©∫ Diagnostic complet VRAMancer...")
        
        # Ex√©cuter le script de diagnostic
        if os.path.exists('fix_windows_dashboard.py'):
            try:
                subprocess.run([self.python_exe, 'fix_windows_dashboard.py'], check=True)
            except subprocess.CalledProcessError:
                print("‚ùå Erreur lors du diagnostic")
        else:
            print("‚ùå Script de diagnostic manquant")
    
    def main_loop(self):
        """Boucle principale du lanceur"""
        print("üéØ Initialisation VRAMancer Launcher...")
        
        # V√©rifications initiales
        if not self.check_python_version():
            print("‚ùå Version Python incompatible")
            return
        
        self.check_dependencies()
        
        while True:
            choice = self.show_menu()
            
            if choice == '0':
                print("üëã Au revoir!")
                break
            
            elif choice == '1':
                if self.dashboard_status['web']['available']:
                    self.launch_dashboard('web')
                else:
                    print("‚ùå Web dashboard non disponible. Installez les d√©pendances d'abord.")
            
            elif choice == '2':
                if self.dashboard_status['qt']['available']:
                    self.launch_dashboard('qt')
                else:
                    print("‚ùå Qt dashboard non disponible. Installez PyQt5 d'abord.")
            
            elif choice == '3':
                if self.dashboard_status['tk']['available']:
                    self.launch_dashboard('tk')
                else:
                    print("‚ùå Tkinter dashboard non disponible.")
            
            elif choice == '4':
                self.launch_dashboard('minimal')
            
            elif choice == '5':
                if self.install_missing_dependencies():
                    print("‚úÖ Red√©marrez le lanceur pour voir les changements")
                    self.check_dependencies()  # Re-v√©rifier
            
            elif choice == '6':
                self.run_diagnostic()
            
            else:
                print("‚ùå Choix invalide")
            
            input("\nAppuyez sur Entr√©e pour continuer...")

def main():
    """Point d'entr√©e principal"""
    try:
        launcher = VRAMancerLauncher()
        launcher.main_loop()
    except KeyboardInterrupt:
        print("\nüëã Lanceur interrompu")
    except Exception as e:
        print(f"‚ùå Erreur inattendue: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()